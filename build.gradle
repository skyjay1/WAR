plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = project.mod_version
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"


minecraft {
   
   mappings channel: "${project.mappings_channel}", version: "${project.mappings_version}"
   
   // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                sswar {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                sswar {
                    source sourceSets.main
                }
            }
        }
		
		data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'sswar', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                sswar {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name 'CurseMaven'
        url 'https://www.cursemaven.com/'
    }
    maven {
        name 'Curios'
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name 'JEI'
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // Curios
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")

    // JEI
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // Runtime mods for testing
    runtimeOnly fg.deobf("curse.maven:backpacked-${backpacked_project}:${backpacked_file}")
    runtimeOnly fg.deobf("curse.maven:gravestone-${gravestone_project}:${gravestone_file}")
    implementation fg.deobf("curse.maven:cosmetic_armor-${cosmetic_armor_project}:${cosmetic_armor_file}")
    runtimeOnly fg.deobf("curse.maven:structure_gel-${structure_gel_project}:${structure_gel_file}")
    implementation fg.deobf("curse.maven:blue_skies-${blue_skies_project}:${blue_skies_file}")
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${mod_name}",
                "Specification-Vendor": "${mod_authors}",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"skyjay1",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

javadoc {
  failOnError = false
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}